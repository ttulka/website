(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{236:function(t,e,a){"use strict";a.r(e);var n=a(6),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"garbage-collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#garbage-collection"}},[t._v("#")]),t._v(" Garbage Collection")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("This section covers the new runtime added in AssemblyScript 0.18. The previous runtime documentation including migration guidelines "),a("RouterLink",{attrs:{to:"/runtime.html"}},[t._v("can be found here")]),t._v(".")],1)]),t._v(" "),a("p",[t._v("AssemblyScript implements garbage collection on top of linear memory while the WebAssembly "),a("a",{attrs:{href:"https://github.com/WebAssembly/gc",target:"_blank",rel:"noopener noreferrer"}},[t._v("GC"),a("OutboundLink")],1),t._v(" ðŸ¦„ proposal is still in the works. More precisely it implements multiple runtime variants that are useful for different use cases, with the default being your typical memory manager and GC. The interface of the different variants is always the same, so these are interchangeable, yet differ in their level of sophistication. In case of doubt, starting out with the default is probably just fine.")]),t._v(" "),a("h2",{attrs:{id:"runtime-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtime-interface"}},[t._v("#")]),t._v(" Runtime interface")]),t._v(" "),a("p",[t._v("Using the "),a("code",[t._v("--exportRuntime")]),t._v(" compiler option, an interface to the runtime can be exported from the module to the host, so it becomes possible to allocate new objects and invoke the garbage collector externally.")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("u32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("usize")]),t._v("\n")])])]),a("p",[t._v("Allocates a new garbage collected instance of the object represented by the specified class id, of at least the specified size. Returns the pointer to the object, typically pointing at the object's data respectively its first field.")]),t._v(" "),a("p",[t._v("Note that the "),a("RouterLink",{attrs:{to:"/loader.html"}},[t._v("loader")]),t._v(" provides more convenient wrappers like "),a("code",[t._v("__newString")]),t._v(" and "),a("code",[t._v("__newArray")]),t._v(" as well. "),a("code",[t._v("__new")]),t._v(" is just the underlying implementation. The respective class id for the "),a("code",[t._v("id")]),t._v(" argument can be obtained within WebAssembly via "),a("code",[t._v("idof<AClass>()")]),t._v(", typically exporting it to the host as a constant to use with "),a("code",[t._v("__new")]),t._v(" or "),a("code",[t._v("__newArray")]),t._v(".")],1)]),t._v(" "),a("li",[a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__pin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("usize")]),t._v("\n")])])]),a("p",[t._v("Pins the object pointed to by "),a("code",[t._v("ptr")]),t._v(" externally so it and its directly reachable members and indirectly reachable objects do not become garbage collected.")])]),t._v(" "),a("li",[a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__unpin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n")])])]),a("p",[t._v("Unpins the object pointed to by "),a("code",[t._v("ptr")]),t._v(" externally so it can become garbage collected.")])]),t._v(" "),a("li",[a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n")])])]),a("p",[t._v("Performs a full garbage collection.")])])]),t._v(" "),a("p",[t._v("To interface with the runtime externally, for example to allocate objects in linear memory, you'll probably want to use the "),a("RouterLink",{attrs:{to:"/loader.html"}},[t._v("loader")]),t._v(" as well.")],1),t._v(" "),a("h2",{attrs:{id:"runtime-variants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtime-variants"}},[t._v("#")]),t._v(" Runtime variants")]),t._v(" "),a("p",[t._v("With the "),a("code",[t._v("--runtime")]),t._v(" compiler option, one of multiple runtime variants can be selected, which determines the memory allocator and garbage collector included in a program:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  --runtime             Specifies the runtime variant to include in the program.\n\n                         incremental  TLSF + incremental GC (default)\n                         minimal      TLSF + lightweight GC invoked externally\n                         stub         Minimal runtime stub (never frees)\n                         ...          Path to a custom runtime implementation\n\n  --exportRuntime       Exports the runtime helpers (__new, __collect etc.).\n")])])]),a("h3",{attrs:{id:"incremental-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#incremental-runtime"}},[t._v("#")]),t._v(" Incremental runtime")]),t._v(" "),a("p",[t._v("This is the default runtime variant included in an AssemblyScript program, combining an Incremental Tri-Color Mark & Sweep (ITCMS) garbage collector with a Two-Level Segregate Fit (TLSF) memory manager. It is fully automated as one would expect from a typical GC, but its implementation has to go to lengths, involving some overhead, to polyfill functionality that is not yet provided by WebAssembly itself. It needs to maintain a shadow stack for example, and instruments binaries with it.")]),t._v(" "),a("p",[t._v("The incremental runtime is most suitable for non-trivial programs where short pause times are important, like in games, or where manually invoking the GC is not an option, like in WASI applications.")]),t._v(" "),a("p",[a("strong",[t._v("Usage instructions")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("When a managed object is exclusively referenced externally, "),a("code",[t._v("exports.__pin(objPtr)")]),t._v(" it so it doesn't become collected when WebAssembly code executes (more precisely: performs an allocation).")]),t._v(" "),a("li",[t._v("When the external object is not needed anymore, "),a("code",[t._v("exports.__unpin(objPtr)")]),t._v(" it so it can become collected again.")]),t._v(" "),a("li",[t._v("Note that a pinned object also keeps its directly reachable members and any indirectly reachable objects alive.")]),t._v(" "),a("li",[t._v("It is safe to omit pinning an object externally if it is known to be referenced from within WebAssembly anyhow.")]),t._v(" "),a("li",[t._v("It is possible to force a full collection (finishes current cycle, does another full cycle) using "),a("code",[t._v("exports.__collect()")]),t._v(", if so desired.")])]),t._v(" "),a("p",[a("strong",[t._v("Example usage:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" gameEnded "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateGameProducingGarbage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// incrementally performs GC")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gameEnded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderEndgameScreenProducingGarbage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optionally clean up the remains")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestAnimationFrame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderGameProducingGarbage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// incrementally performs GC")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Careful pinning is particularly important when using the incremental runtime, since it may collect some garbage whenever an allocation happens within WebAssembly. Missing to pin an object may randomly result in use-after-free like errors otherwise that are notoriously hard to debug.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__pin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__newString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next line may collect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__newString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allocates")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__pin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringConcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// puts args on stack")]),t._v("\nexports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__unpin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... do something with cPtr ...")]),t._v("\nexports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__unpin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"minimal-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimal-runtime"}},[t._v("#")]),t._v(" Minimal runtime")]),t._v(" "),a("p",[t._v("The minimal runtime is similar to the incremental runtime, except that it doesn't go to lengths to polyfill WebAssembly features that are not yet available. It features a simpler (non-incremental) Two-Color Mark & Sweep (TCMS) garbage collector on top of TLSF, making it a reasonable compromise.")]),t._v(" "),a("p",[t._v("The minimal runtime works best for use-cases where the GC can be invoked externally at appropriate places, that is when the WebAssembly execution stack is known to be fully unwound. The execution stack is typically unwound when "),a("code",[t._v("exports.__collect()")]),t._v(" is invoked neither directly nor indirectly from WebAssembly, for example when invoking it from JavaScript only. The AssemblyScript compiler itself is a good candidate for the minimal runtime for example, as it does bounded amounts of work in bounded amounts of time, so it is sufficient to call "),a("code",[t._v("exports.__collect()")]),t._v(" occasionally when specific phases of compilation are complete.")]),t._v(" "),a("p",[t._v("Unlike the incremental runtime, the minimal runtime does not run interleaved with the program but always does a full garbage collection cycle when invoked externally, stopping the program while doing so. It is important to not overdo invoking "),a("code",[t._v("exports.__collect()")]),t._v(" to avoid marking a lot but sweeping little for that reason. In case of doubt, benchmark to find a reasonable sweet spot. However, when used wisely, the minimal runtime typically has better throughput than the incremental runtime.")]),t._v(" "),a("p",[a("strong",[t._v("Usage instructions:")])]),t._v(" "),a("ul",[a("li",[t._v("Whenever you see fit, invoke "),a("code",[t._v("exports.__collect()")]),t._v(" externally to collect all garbage. Don't overdo calling it, though.")]),t._v(" "),a("li",[t._v("When a managed object is exclusively referenced externally, "),a("code",[t._v("exports.__pin(objPtr)")]),t._v(" it so it doesn't become collected when "),a("code",[t._v("exports.__collect()")]),t._v(" is being invoked.")]),t._v(" "),a("li",[t._v("When the external object is not needed anymore, "),a("code",[t._v("exports.__unpin(objPtr)")]),t._v(" it so it can become collected again.")]),t._v(" "),a("li",[t._v("Note that a pinned object also keeps its directly reachable members and any indirectly reachable objects alive.")]),t._v(" "),a("li",[t._v("It is safe to omit pinning an object externally if\n"),a("ul",[a("li",[t._v("it is known to be referenced from within WebAssembly anyhow, directly or indirectly reachable from any root, like a global.")]),t._v(" "),a("li",[t._v("it is solely used as an argument to a WebAssembly function and not used externally anymore afterwards.")]),t._v(" "),a("li",[t._v("it is guaranteed that "),a("code",[t._v("exports.__collect()")]),t._v(" will not be called while the object is alive.")])])]),t._v(" "),a("li",[t._v("In case of doubt, pin.")])]),t._v(" "),a("p",[a("strong",[t._v("Example usage:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomeHeavyWorkProducingGarbage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// clean up all garbage")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("An important usage difference between the incremental and the minimal runtime is in when it is necessary to pin objects. With the minimal runtime one has manual control over when the GC runs, so pinning is only necessary if a call to "),a("code",[t._v("exports.__collect()")]),t._v(" may happen, while the incremental runtime may free an object whenever an allocation happens in WebAssembly code. For example, the following snippet works fine with the minimal runtime, but can randomly fail with the incremental runtime:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringConcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__newString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__newString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... do something with cPtr ...")]),t._v("\nexports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// don't use cPtr anymore")]),t._v("\n")])])]),a("h3",{attrs:{id:"stub-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stub-runtime"}},[t._v("#")]),t._v(" Stub runtime")]),t._v(" "),a("p",[t._v("The stub is a maximally minimal runtime substitute, consisting of a simple and fast bump allocator with no means of freeing up memory again, except when freeing the respective most recently allocated object on top of the bump. As such, the stub runtime is useful where dynamic allocation, or garbage for that matter, is not a concern, for example because the program doesn't produce any or only executes a single time with a bounded limit of garbage before the entire module is terminated and collected by the host again.")]),t._v(" "),a("p",[a("strong",[t._v("Usage instructions")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("Since the stub runtime never frees memory, there is nothing special to take care of except that it leaks memory by design.")])]),t._v(" "),a("p",[a("strong",[t._v("Example usage")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomeHeavyWorkProducingGarbage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// throw away the entire module instance")]),t._v("\n")])])]),a("h3",{attrs:{id:"custom-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-runtime"}},[t._v("#")]),t._v(" Custom runtime")]),t._v(" "),a("p",[t._v("Even though of limited usefulness, it is also possible to create a new runtime (essentially a memory manager and a garbage collector) from scratch and include it instead of one of the options provided by AssemblyScript itself. To do so, a custom runtime needs to provide the implementations of the externally visible interfaces like "),a("code",[t._v("__new")]),t._v(", plus the underlying interfaces like "),a("code",[t._v("__alloc")]),t._v(" and "),a("code",[t._v("__free")]),t._v(", on top of compiler-generated functionality like "),a("code",[t._v("__visit_members")]),t._v(", as described in more detail in "),a("a",{attrs:{href:"https://github.com/AssemblyScript/assemblyscript/tree/main/std/assembly/rt",target:"_blank",rel:"noopener noreferrer"}},[t._v("the runtime's README"),a("OutboundLink")],1),t._v(". Looking at the implementation of the relatively simple stub runtime before diving into the more sophisticated ones may be a good starting point.")]),t._v(" "),a("ul",[a("li",[t._v("Runtimes typically include a general purpose memory manager to also drive "),a("code",[t._v("heap.alloc")]),t._v(" and "),a("code",[t._v("heap.free")])]),t._v(" "),a("li",[t._v("Garbage collection is precise, with compiler-generated visitors aware of what's a pointer and what's not")]),t._v(" "),a("li",[t._v("The interface is tailored for tracing GCs, so attempts to implement other forms of GC may not be viable")])]),t._v(" "),a("h2",{attrs:{id:"the-future-webassembly-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-future-webassembly-gc"}},[t._v("#")]),t._v(" The future: WebAssembly GC")]),t._v(" "),a("p",[t._v("The WebAssembly "),a("a",{attrs:{href:"https://github.com/WebAssembly/gc",target:"_blank",rel:"noopener noreferrer"}},[t._v("GC"),a("OutboundLink")],1),t._v(" ðŸ¦„ proposal is still in the works but our focus is to switch to it as soon as possible, hopefully making most of the above redundant and the overall experience more convenient.")])])}),[],!1,null,null,null);e.default=s.exports}}]);